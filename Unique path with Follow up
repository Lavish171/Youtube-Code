👊👊Unique path 

✨✨✨⭐⭐C++ Code is below the Java Code


✨✨👉Java Code :
public class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]  = new int[n][m];
        
        //When (n==0||m==0) there is only  1 way  since the robot can't go left or up.
        for(int i = 0; i<n;i++)
            dp[i][0] = 1;
        
        for(int j= 0;j<m;j++)
            dp[0][j]=1;
        
        for(int i = 1;i<n;i++){
            for(int j = 1;j<m;j++){
                dp[i][j] = dp[i-1][j]+dp[i][j-1];//sum of possible path from up + possible path from left
            }
        }
        return dp[n-1][m-1];//last element  of matrix will contains the answer
    }
}    

✨✨👉C++ Code

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 1));
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
};


👊👊Unique Path with Obstacles

✨✨👉Java Code 
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        //Empty case
        if(obstacleGrid.length == 0) return 0;
        
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(obstacleGrid[i][j] == 1)
                    obstacleGrid[i][j] = 0;
                else if(i == 0 && j == 0)
                    obstacleGrid[i][j] = 1;
                else if(i == 0)
                    obstacleGrid[i][j] = obstacleGrid[i][j - 1] * 1;// For row 0, if there are no paths to left cell, then its 0,else 1
                else if(j == 0)
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] * 1;// For col 0, if there are no paths to upper cell, then its 0,else 1
                else
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
            }
        }
        
        return obstacleGrid[rows - 1][cols - 1];
        
    }
}


✨✨👉C++ Code
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    int h = obstacleGrid.size();
    if(h == 0) return 0;
    int w = obstacleGrid[0].size();
    if(w == 0) return 0;
    if(obstacleGrid[0][0]) return 0;
    
    // first cell has 1 path
    obstacleGrid[0][0] = 1;
    
    // first row all are '1' until obstacle (from left only)
    for(int i=1; i<w; i++){
        obstacleGrid[0][i] = obstacleGrid[0][i] ? 0 : obstacleGrid[0][i-1];
    }

    for(int j=1; j<h; j++){
        // first column is like first row (from top only)
        obstacleGrid[j][0] = obstacleGrid[j][0] ? 0 : obstacleGrid[j-1][0];
        
        // others are up+left
        for(int i=1; i<w; i++){
            obstacleGrid[j][i] = obstacleGrid[j][i] ? 0 : obstacleGrid[j-1][i] + obstacleGrid[j][i-1];
        }
    }
    
    return obstacleGrid[h-1][w-1];
}


