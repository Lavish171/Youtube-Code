C++ code is below Java code

âœ¨âœ¨ðŸ‘‰Java Code

âœ¨âœ¨Prefix sum appraoch Code -----

class Solution {
    public int subarraySum(int[] nums, int k) {
    int ans=0;//count of possible subarrays
    int cur_sum=0; //stores the sum from starting index to current index
        
    for(int i=1;i<nums.length;i++)
        nums[i]+=nums[i-1];//converted original array to prefix sum array
        
    for(int j=0;j<nums.length;j++)
    {
        cur_sum=nums[j];//element of prefix sum at index j implies sum from index 0 to index j in                          //original given array
        
        if(cur_sum==k)//if sum from starting into current index in  given input array equal to k
            ans++;
        for(int i=0;i<j;i++)
        {
          if(nums[i]==(cur_sum-k))//if sum of subarray  from any index i1 to index i2 equal to k
              ans++; 
        }
    }
        return ans;    
    }
}

âœ¨ðŸ‘‰ðŸ‘‰Code using Hashmap

class Solution {
    public int subarraySum(int[] nums, int k) {
    int len=nums.length;
    Map<Integer,Integer> map=new HashMap<>();
    int result=0;
    int cur_sum=0;
    for(int i=0;i<len;i++)
    {
        cur_sum+=nums[i];
        if(cur_sum==k) 
          result++;
        
        if(map.containsKey(cur_sum-k))//check whether we have seen  cur_sum-k in map
            result+=map.get(cur_sum-k);//update the result 
        
        map.put(cur_sum,map.getOrDefault(cur_sum,0)+1);//putting the no of occurences of sum as                                                            //value in the map
    }
        
        return result;
    }
}

âœ¨âœ¨ðŸ‘‡ðŸ‘‡ðŸ‘‡C++ code 

Code using prefix sumâœ¨âœ¨ 

class Solution {
public:
	int subarraySum(vector<int>& nums, int k) {
		unordered_map<int,int> m;// sum->number of that sum
		int ans=0;
		m[0]=1;
		for(int i=1;i<nums.size();i++)
		{
			nums[i]+=nums[i-1];

		}

		for(int i=0;i<nums.size();i++)
		{
			ans+=m[nums[i]-k];          
			m[nums[i]]+=1;
		}


		return ans;
	}
};

âœ¨ðŸ‘‰ðŸ‘‰Code using Hashmap
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        //For fast I/O in C++
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int n = nums.size();
        if(n==0)
            return 0;
        
        unordered_map<int,int> mymap;   //Key = PrefixSUM, Value = Count of PrefixSUM.
        int currSUM = 0;
        int i = 0;
        int count = 0;
        
        while(i<n)
        {
            currSUM += nums[i];
            
            if(currSUM == k)    //We found a new subArray with SUM = k
                count += 1;
            
            if(mymap.find(currSUM-k)!=mymap.end())
                count += mymap[currSUM-k];
            
            mymap[currSUM] += 1;
            i += 1;
        }
        return count;
    }
};



